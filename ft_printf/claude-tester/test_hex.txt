/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_hex.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ft_printf_tester                           +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/17                              #+#    #+#             */
/*   Updated: 2025/05/17                             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf_tester.h"

void	test_hex_basic(void)
{
	print_header("HEXADECIMAL - BASIC TESTS");
	
	// Basic lowercase hex tests
	ft_printf("Basic lowercase hex: %x\n", 42);
	ft_printf("Zero lowercase hex: %x\n", 0);
	ft_printf("Max int lowercase hex: %x\n", INT_MAX);
	ft_printf("Multiple lowercase hex: %x %x %x\n", 42, 0, 255);
	
	// Basic uppercase hex tests
	ft_printf("Basic uppercase hex: %X\n", 42);
	ft_printf("Zero uppercase hex: %X\n", 0);
	ft_printf("Max int uppercase hex: %X\n", INT_MAX);
	ft_printf("Multiple uppercase hex: %X %X %X\n", 42, 0, 255);
	
	// Mix of lowercase and uppercase
	ft_printf("Mixed case hex: %x %X %x %X\n", 10, 11, 12, 13);
	
	// Special values, good for testing
	ft_printf("Value 10 (a/A): Lowercase: %x, Uppercase: %X\n", 10, 10);
	ft_printf("Value 15 (f/F): Lowercase: %x, Uppercase: %X\n", 15, 15);
	ft_printf("Value 255 (ff/FF): Lowercase: %x, Uppercase: %X\n", 255, 255);
	ft_printf("Value 4096 (1000): Lowercase: %x, Uppercase: %X\n", 4096, 4096);
	
	print_divider();
}

void	test_hex_width(void)
{
	print_header("HEXADECIMAL - WIDTH TESTS");
	
	// Width tests for lowercase hex
	ft_printf("Width 10 lowercase: '%10x'\n", 42);
	ft_printf("Width 10, zero lowercase: '%10x'\n", 0);
	ft_printf("Width 2 (smaller than value) lowercase: '%2x'\n", 255);
	ft_printf("Width 10, large value lowercase: '%10x'\n", 0xABCDEF);
	
	// Width tests for uppercase hex
	ft_printf("Width 10 uppercase: '%10X'\n", 42);
	ft_printf("Width 10, zero uppercase: '%10X'\n", 0);
	ft_printf("Width 2 (smaller than value) uppercase: '%2X'\n", 255);
	ft_printf("Width 10, large value uppercase: '%10X'\n", 0xABCDEF);
	
	// Width with left justification for lowercase
	ft_printf("Width 10, left-justified lowercase: '%-10x'\n", 42);
	ft_printf("Width 10, left-justified, zero lowercase: '%-10x'\n", 0);
	ft_printf("Width 10, left-justified, large value lowercase: '%-10x'\n", 0xABCDEF);
	
	// Width with left justification for uppercase
	ft_printf("Width 10, left-justified uppercase: '%-10X'\n", 42);
	ft_printf("Width 10, left-justified, zero uppercase: '%-10X'\n", 0);
	ft_printf("Width 10, left-justified, large value uppercase: '%-10X'\n", 0xABCDEF);
	
	// Width with zero padding for lowercase
	ft_printf("Width 10, zero-padded lowercase: '%010x'\n", 42);
	ft_printf("Width 10, zero-padded, zero lowercase: '%010x'\n", 0);
	ft_printf("Width 10, zero-padded, large value lowercase: '%010x'\n", 0xABCDEF);
	
	// Width with zero padding for uppercase
	ft_printf("Width 10, zero-padded uppercase: '%010X'\n", 42);
	ft_printf("Width 10, zero-padded, zero uppercase: '%010X'\n", 0);
	ft_printf("Width 10, zero-padded, large value uppercase: '%010X'\n", 0xABCDEF);
	
	// Zero padding with left justification (left justification should take precedence)
	ft_printf("Width 10, zero-padded, left-justified lowercase: '%-010x'\n", 42);
	ft_printf("Width 10, zero-padded, left-justified uppercase: '%-010X'\n", 42);
	
	print_divider();
}

void	test_hex_precision(void)
{
	print_header("HEXADECIMAL - PRECISION TESTS");
	
	// Precision tests for lowercase hex
	ft_printf("Precision 5 lowercase: '%.5x'\n", 42);
	ft_printf("Precision 5, zero lowercase: '%.5x'\n", 0);
	ft_printf("Precision 2 (smaller than value) lowercase: '%.2x'\n", 255);
	ft_printf("Precision 10, large value lowercase: '%.10x'\n", 0xABCDEF);
	
	// Precision tests for uppercase hex
	ft_printf("Precision 5 uppercase: '%.5X'\n", 42);
	ft_printf("Precision 5, zero uppercase: '%.5X'\n", 0);
	ft_printf("Precision 2 (smaller than value) uppercase: '%.2X'\n", 255);
	ft_printf("Precision 10, large value uppercase: '%.10X'\n", 0xABCDEF);
	
	// Precision 0
	ft_printf("Precision 0, non-zero lowercase: '%.0x'\n", 42);
	ft_printf("Precision 0, zero lowercase: '%.0x'\n", 0);  // Should print nothing for 0 value
	ft_printf("Precision 0, non-zero uppercase: '%.0X'\n", 42);
	ft_printf("Precision 0, zero uppercase: '%.0X'\n", 0);  // Should print nothing for 0 value
	
	// Precision 0 with explicitly specified value (just a dot)
	ft_printf("Precision 0, non-zero with explicit dot lowercase: '%.x'\n", 42);
	ft_printf("Precision 0, zero with explicit dot lowercase: '%.x'\n", 0);
	ft_printf("Precision 0, non-zero with explicit dot uppercase: '%.X'\n", 42);
	ft_printf("Precision 0, zero with explicit dot uppercase: '%.X'\n", 0);
	
	print_divider();
}

void	test_hex_width_precision(void)
{
	print_header("HEXADECIMAL - WIDTH AND PRECISION TESTS");
	
	// Width and precision for lowercase hex
	ft_printf("Width 10, Precision 5 lowercase: '%10.5x'\n", 42);
	ft_printf("Width 10, Precision 5, zero lowercase: '%10.5x'\n", 0);
	ft_printf("Width 5, Precision 10 lowercase: '%5.10x'\n", 42);
	ft_printf("Width 10, Precision 0, non-zero lowercase: '%10.0x'\n", 42);
	ft_printf("Width 10, Precision 0, zero lowercase: '%10.0x'\n", 0);
	
	// Width and precision for uppercase hex
	ft_printf("Width 10, Precision 5 uppercase: '%10.5X'\n", 42);
	ft_printf("Width 10, Precision 5, zero uppercase: '%10.5X'\n", 0);
	ft_printf("Width 5, Precision 10 uppercase: '%5.10X'\n", 42);
	ft_printf("Width 10, Precision 0, non-zero uppercase: '%10.0X'\n", 42);
	ft_printf("Width 10, Precision 0, zero uppercase: '%10.0X'\n", 0);
	
	// Width and precision with left justification for lowercase
	ft_printf("Width 10, Precision 5, left-justified lowercase: '%-10.5x'\n", 42);
	ft_printf("Width 10, Precision 5, left-justified, zero lowercase: '%-10.5x'\n", 0);
	ft_printf("Width 5, Precision 10, left-justified lowercase: '%-5.10x'\n", 42);
	
	// Width and precision with left justification for uppercase
	ft_printf("Width 10, Precision 5, left-justified uppercase: '%-10.5X'\n", 42);
	ft_printf("Width 10, Precision 5, left-justified, zero uppercase: '%-10.5X'\n", 0);
	ft_printf("Width 5, Precision 10, left-justified uppercase: '%-5.10X'\n", 42);
	
	// Width, precision and zero padding (precision should override zero padding)
	ft_printf("Width 10, Precision 5, zero-padded lowercase: '%010.5x'\n", 42);
	ft_printf("Width 10, Precision 5, zero-padded uppercase: '%010.5X'\n", 42);
	
	print_divider();
}

void	test_hex_hash_flag(void)
{
	print_header("HEXADECIMAL - HASH FLAG TESTS");
	
	// Hash flag adds "0x" prefix for lowercase hex
	ft_printf("Hash flag lowercase: '%#x'\n", 42);
	ft_printf("Hash flag, zero lowercase: '%#x'\n", 0);  // No prefix for zero
	ft_printf("Hash flag uppercase: '%#X'\n", 42);       // Should add "0X"
	ft_printf("Hash flag, zero uppercase: '%#X'\n", 0);  // No prefix for zero
	
	// Hash flag with width
	ft_printf("Hash flag with width 10 lowercase: '%#10x'\n", 42);
	ft_printf("Hash flag with width 10 uppercase: '%#10X'\n", 42);
	ft_printf("Hash flag with width 10, zero lowercase: '%#10x'\n", 0);
	ft_printf("Hash flag with width 10, zero uppercase: '%#10X'\n", 0);
	
	// Hash flag with left-justification
	ft_printf("Hash flag with width 10, left-justified lowercase: '%#-10x'\n", 42);
	ft_printf("Hash flag with width 10, left-justified uppercase: '%#-10X'\n", 42);
	
	// Hash flag with zero padding
	ft_printf("Hash flag with width 10, zero-padded lowercase: '%#010x'\n", 42);
	ft_printf("Hash flag with width 10, zero-padded uppercase: '%#010X'\n", 42);
	
	// Hash flag with precision
	ft_printf("Hash flag with precision 5 lowercase: '%#.5x'\n", 42);
	ft_printf("Hash flag with precision 5 uppercase: '%#.5X'\n", 42);
	ft_printf("Hash flag with precision 0, non-zero lowercase: '%#.0x'\n", 42);
	ft_printf("Hash flag with precision 0, zero lowercase: '%#.0x'\n", 0);
	
	// Hash flag with width and precision
	ft_printf("Hash flag with width 10, precision 5 lowercase: '%#10.5x'\n", 42);
	ft_printf("Hash flag with width 10, precision 5 uppercase: '%#10.5X'\n", 42);
	ft_printf("Hash flag with width 10, precision 0, zero lowercase: '%#10.0x'\n", 0);
	ft_printf("Hash flag with width 10, precision 0, zero uppercase: '%#10.0X'\n", 0);
	
	print_divider();
}

void	test_hex_flag_combinations(void)
{
	print_header("HEXADECIMAL - FLAG COMBINATIONS");
	
	// Testing valid flag combinations for hex
	// Note: '+' and ' ' flags are not applicable for hex values
	// but let's test them anyway to ensure they are properly ignored
	
	// Plus and space flags (should be ignored)
	ft_printf("Plus flag (should be ignored) lowercase: '%+x'\n", 42);
	ft_printf("Space flag (should be ignored) lowercase: '% x'\n", 42);
	ft_printf("Plus flag (should be ignored) uppercase: '%+X'\n", 42);
	ft_printf("Space flag (should be ignored) uppercase: '% X'\n", 42);
	
	// Zero flag
	ft_printf("Zero flag with width lowercase: '%05x'\n", 42);
	ft_printf("Zero flag with width uppercase: '%05X'\n", 42);
	
	// Zero flag with hash flag
	ft_printf("Zero flag with hash and width lowercase: '%#05x'\n", 42);
	ft_printf("Zero flag with hash and width uppercase: '%#05X'\n", 42);
	
	// Zero flag with precision (precision should override zero flag)
	ft_printf("Zero flag with width and precision lowercase: '%05.3x'\n", 42);
	ft_printf("Zero flag with width and precision uppercase: '%05.3X'\n", 42);
	
	// Minus flag (left justification)
	ft_printf("Minus flag with width lowercase: '%-5x'\n", 42);
	ft_printf("Minus flag with width uppercase: '%-5X'\n", 42);
	
	// Minus and zero flags together (minus should override zero)
	ft_printf("Minus and zero flags with width lowercase: '%-05x'\n", 42);
	ft_printf("Minus and zero flags with width uppercase: '%-05X'\n", 42);
	
	// Minus flag with hash flag
	ft_printf("Minus flag with hash and width lowercase: '%#-10x'\n", 42);
	ft_printf("Minus flag with hash and width uppercase: '%#-10X'\n", 42);
	
	// Multiple flags
	ft_printf("All flags lowercase: '%+-0# 10.5x'\n", 42);
	ft_printf("All flags uppercase: '%+-0# 10.5X'\n", 42);
	
	print_divider();
}

void	test_hex_edge_cases(void)
{
	print_header("HEXADECIMAL - EDGE CASES");
	
	// Edge cases
	ft_printf("INT_MAX lowercase: '%x'\n", INT_MAX);
	ft_printf("INT_MAX uppercase: '%X'\n", INT_MAX);
	ft_printf("UINT_MAX lowercase: '%x'\n", UINT_MAX);
	ft_printf("UINT_MAX uppercase: '%X'\n", UINT_MAX);
	
	// INT_MAX with formatting
	ft_printf("INT_MAX with width lowercase: '%15x'\n", INT_MAX);
	ft_printf("INT_MAX with precision lowercase: '%.15x'\n", INT_MAX);
	ft_printf("INT_MAX with hash flag lowercase: '%#x'\n", INT_MAX);
	ft_printf("INT_MAX with width, precision, hash lowercase: '%#20.15x'\n", INT_MAX);
	
	// UINT_MAX with formatting
	ft_printf("UINT_MAX with width uppercase: '%15X'\n", UINT_MAX);
	ft_printf("UINT_MAX with precision uppercase: '%.15X'\n", UINT_MAX);
	ft_printf("UINT_MAX with hash flag uppercase: '%#X'\n", UINT_MAX);
	ft_printf("UINT_MAX with width, precision, hash uppercase: '%#20.15X'\n", UINT_MAX);
	
	// Small hex value with large precision
	ft_printf("Small value with large precision lowercase: '%.20x'\n", 42);
	ft_printf("Small value with large precision uppercase: '%.20X'\n", 42);
	
	// Zero with different formats
	ft_printf("Zero with width lowercase: '%5x'\n", 0);
	ft_printf("Zero with precision lowercase: '%.5x'\n", 0);
	ft_printf("Zero with hash flag lowercase: '%#x'\n", 0);  // Should not add prefix for 0
	ft_printf("Zero with width, precision, hash lowercase: '%#10.5x'\n", 0);
	
	// Same tests for uppercase
	ft_printf("Zero with width uppercase: '%5X'\n", 0);
	ft_printf("Zero with precision uppercase: '%.5X'\n", 0);
	ft_printf("Zero with hash flag uppercase: '%#X'\n", 0);  // Should not add prefix for 0
	ft_printf("Zero with width, precision, hash uppercase: '%#10.5X'\n", 0);
	
	// Unusual combinations
	ft_printf("Width 0, Precision 0, zero value lowercase: '%0.0x'\n", 0);
	ft_printf("Width 1, Precision 0, zero value lowercase: '%1.0x'\n", 0);
	ft_printf("Width 0, Precision 0, zero value uppercase: '%0.0X'\n", 0);
	ft_printf("Width 1, Precision 0, zero value uppercase: '%1.0X'\n", 0);
	
	print_divider();
}

void	test_hex(void)
{
	test_hex_basic();
	test_hex_width();
	test_hex_precision();
	test_hex_width_precision();
	test_hex_hash_flag();
	test_hex_flag_combinations();
	test_hex_edge_cases();
}
